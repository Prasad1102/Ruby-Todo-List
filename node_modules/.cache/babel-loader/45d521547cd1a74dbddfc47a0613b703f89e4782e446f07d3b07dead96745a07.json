{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import * as API from \"../../utils/api\";\n// import styles from \"./Index.module.css\";\n// import EditTodo from \"./EditTodo\";\n// import { Link } from \"react-router-dom\";\n\n// const Index = () => {\n//   const [todos, setTodos] = useState([]);\n//   const [state, setState] = useState({ todos: [], perPage: 3, page: 1 });\n\n//   useEffect(() => {\n//     fetchTodos();\n//   }, [state.page]);\n\n//   const fetchTodos = () => {\n//     API.getTodos({ page: state.page, per_page: state.perPage })\n//       .then((response) => {\n//         setTodos(response.data);\n//         setState((prevState) => {\n//           return {\n//             ...prevState, // Spread operator used to retain previous state\n//             todos: response.data, // Updating 'todos' property in the state with new data from response\n//           };\n//         });\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   };\n\n//   const changePage = (page) => {\n//     setState((prevState) => {\n//       return {\n//         ...prevState, // Spread operator used to retain previous state\n//         page: page, // Updating 'todos' property in the state with new data from response\n//       };\n//     });\n//   };\n\n//   const handleCheckBoxChange = (id, checked) => {\n//     API.editTodo(id, { completed: checked }).then((response) => {\n//       setTodos((prevTodos) =>\n//         prevTodos.map((todo) =>\n//           todo.id === id ? { ...todo, completed: checked } : todo\n//         )\n//       );\n//     });\n//   };\n\n//   const totalPages = Math.ceil(todos.length / state.perPage);\n\n//   return (\n//     <>\n//       <p>{console.log(todos)}</p>\n//       <p>{console.log(totalPages)}</p>\n//       <Link to=\"/NewTodo\" className={styles.newTodo}>\n//         New Todo\n//       </Link>\n//       <Link\n//         to=\"/CompleteTodo\"\n//         className={styles.completeTodo}\n//         state={{ completed: todos.filter((todo) => todo.completed) }}\n//       >\n//         Completed Todo\n//       </Link>\n//       <table className={styles.table}>\n//         <thead className={styles.tablehead}>\n//           <tr>\n//             <th>Id</th>\n//             <th>Title</th>\n//             <th>Buttons</th>\n//             <th>Priority</th>\n//           </tr>\n//         </thead>\n//         <tbody className={styles.tablebody}>\n//           {todos.map((todo) => (\n//             <tr key={todo.id}>\n//               <td>{todo.id}</td>\n//               <td>{todo.title}</td>\n//               <td>\n//                 <Link\n//                   to=\"/EditTodo\"\n//                   styles={{ \"text-decoration\": \"linethrough\" }}\n//                   state={{ id: todo.id, title: todo.title }}\n//                 >\n//                   Edit_{\" \"}\n//                 </Link>\n//                 <Link to=\"/DisplayTodo\" state={{ todos: todo, id: todo.id }}>\n//                   Display_\n//                 </Link>\n//                 <input\n//                   type=\"checkbox\"\n//                   checked={todo.completed}\n//                   onChange={(e) =>\n//                     handleCheckBoxChange(todo.id, e.target.checked)\n//                   }\n//                 />\n//               </td>\n//               <td>{todo.priority}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       <button\n//         onClick={() => {\n//           if (state.page > 1) {\n//             changePage(state.page - 1);\n//           }\n//         }}\n//       >\n//         Prev\n//       </button>\n//       ...\n//       <button\n//         onClick={() => {\n//           changePage((state.page = 1));\n//         }}\n//       >\n//         1\n//       </button>\n//       <button\n//         onClick={() => {\n//           changePage((state.page = 2));\n//         }}\n//       >\n//         2\n//       </button>\n//       ...\n//       <button\n//         onClick={() => {\n//           if (todos.length >= 1 && todos.length != 0) {\n//             changePage(state.page + 1);\n//           }\n//         }}\n//       >\n//         Next\n//       </button>\n//     </>\n//   );\n// };\n\n// export default Index;\nimport React, { useEffect, useState } from \"react\";\nimport * as API from \"../../utils/api\";\nimport styles from \"./Index.module.css\";\nimport EditTodo from \"./EditTodo\";\nimport { Link } from \"react-router-dom\";\nconst Index = () => {\n  const [todos, setTodos] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const todosPerPage = 3; // Number of todos per page\n\n  useEffect(() => {\n    fetchTodos();\n  }, [currentPage]);\n  const fetchTodos = () => {\n    API.getTodos({\n      page: currentPage,\n      per_page: todosPerPage\n    }).then(response => {\n      setTodos(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const totalPages = Math.ceil(todos.length / todosPerPage);\n  const handleClick = page => {\n    setCurrentPage(page);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, console.log(todos)), /*#__PURE__*/React.createElement(Link, {\n    to: \"/NewTodo\",\n    className: styles.newTodo\n  }, \"New Todo\"), /*#__PURE__*/React.createElement(Link, {\n    to: \"/CompleteTodo\",\n    className: styles.completeTodo,\n    state: {\n      completed: todos.filter(todo => todo.completed)\n    }\n  }, \"Completed Todo\"), /*#__PURE__*/React.createElement(\"table\", {\n    className: styles.table\n  }), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      if (currentPage > 1) {\n        handleClick(currentPage - 1);\n      }\n    }\n  }, \"Prev\"), Array.from({\n    length: totalPages\n  }, (_, i) => i + 1).map(page => /*#__PURE__*/React.createElement(\"button\", {\n    key: page,\n    onClick: () => handleClick(page),\n    disabled: page === currentPage\n  }, page)), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      if (currentPage < totalPages) {\n        handleClick(currentPage + 1);\n      }\n    }\n  }, \"Next\")));\n};\nexport default Index;","map":{"version":3,"names":["React","useEffect","useState","API","styles","EditTodo","Link","Index","todos","setTodos","currentPage","setCurrentPage","todosPerPage","fetchTodos","getTodos","page","per_page","then","response","data","catch","error","console","log","totalPages","Math","ceil","length","handleClick","createElement","Fragment","to","className","newTodo","completeTodo","state","completed","filter","todo","table","onClick","Array","from","_","i","map","key","disabled"],"sources":["/home/prasad/Ruby/BlogApp/app/javascript/components/Todos/Index.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import * as API from \"../../utils/api\";\n// import styles from \"./Index.module.css\";\n// import EditTodo from \"./EditTodo\";\n// import { Link } from \"react-router-dom\";\n\n// const Index = () => {\n//   const [todos, setTodos] = useState([]);\n//   const [state, setState] = useState({ todos: [], perPage: 3, page: 1 });\n\n//   useEffect(() => {\n//     fetchTodos();\n//   }, [state.page]);\n\n//   const fetchTodos = () => {\n//     API.getTodos({ page: state.page, per_page: state.perPage })\n//       .then((response) => {\n//         setTodos(response.data);\n//         setState((prevState) => {\n//           return {\n//             ...prevState, // Spread operator used to retain previous state\n//             todos: response.data, // Updating 'todos' property in the state with new data from response\n//           };\n//         });\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   };\n\n//   const changePage = (page) => {\n//     setState((prevState) => {\n//       return {\n//         ...prevState, // Spread operator used to retain previous state\n//         page: page, // Updating 'todos' property in the state with new data from response\n//       };\n//     });\n//   };\n\n//   const handleCheckBoxChange = (id, checked) => {\n//     API.editTodo(id, { completed: checked }).then((response) => {\n//       setTodos((prevTodos) =>\n//         prevTodos.map((todo) =>\n//           todo.id === id ? { ...todo, completed: checked } : todo\n//         )\n//       );\n//     });\n//   };\n\n//   const totalPages = Math.ceil(todos.length / state.perPage);\n\n//   return (\n//     <>\n//       <p>{console.log(todos)}</p>\n//       <p>{console.log(totalPages)}</p>\n//       <Link to=\"/NewTodo\" className={styles.newTodo}>\n//         New Todo\n//       </Link>\n//       <Link\n//         to=\"/CompleteTodo\"\n//         className={styles.completeTodo}\n//         state={{ completed: todos.filter((todo) => todo.completed) }}\n//       >\n//         Completed Todo\n//       </Link>\n//       <table className={styles.table}>\n//         <thead className={styles.tablehead}>\n//           <tr>\n//             <th>Id</th>\n//             <th>Title</th>\n//             <th>Buttons</th>\n//             <th>Priority</th>\n//           </tr>\n//         </thead>\n//         <tbody className={styles.tablebody}>\n//           {todos.map((todo) => (\n//             <tr key={todo.id}>\n//               <td>{todo.id}</td>\n//               <td>{todo.title}</td>\n//               <td>\n//                 <Link\n//                   to=\"/EditTodo\"\n//                   styles={{ \"text-decoration\": \"linethrough\" }}\n//                   state={{ id: todo.id, title: todo.title }}\n//                 >\n//                   Edit_{\" \"}\n//                 </Link>\n//                 <Link to=\"/DisplayTodo\" state={{ todos: todo, id: todo.id }}>\n//                   Display_\n//                 </Link>\n//                 <input\n//                   type=\"checkbox\"\n//                   checked={todo.completed}\n//                   onChange={(e) =>\n//                     handleCheckBoxChange(todo.id, e.target.checked)\n//                   }\n//                 />\n//               </td>\n//               <td>{todo.priority}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       <button\n//         onClick={() => {\n//           if (state.page > 1) {\n//             changePage(state.page - 1);\n//           }\n//         }}\n//       >\n//         Prev\n//       </button>\n//       ...\n//       <button\n//         onClick={() => {\n//           changePage((state.page = 1));\n//         }}\n//       >\n//         1\n//       </button>\n//       <button\n//         onClick={() => {\n//           changePage((state.page = 2));\n//         }}\n//       >\n//         2\n//       </button>\n//       ...\n//       <button\n//         onClick={() => {\n//           if (todos.length >= 1 && todos.length != 0) {\n//             changePage(state.page + 1);\n//           }\n//         }}\n//       >\n//         Next\n//       </button>\n//     </>\n//   );\n// };\n\n// export default Index;\nimport React, { useEffect, useState } from \"react\";\nimport * as API from \"../../utils/api\";\nimport styles from \"./Index.module.css\";\nimport EditTodo from \"./EditTodo\";\nimport { Link } from \"react-router-dom\";\n\nconst Index = () => {\n  const [todos, setTodos] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const todosPerPage = 3; // Number of todos per page\n\n  useEffect(() => {\n    fetchTodos();\n  }, [currentPage]);\n\n  const fetchTodos = () => {\n    API.getTodos({ page: currentPage, per_page: todosPerPage })\n      .then((response) => {\n        setTodos(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const totalPages = Math.ceil(todos.length / todosPerPage);\n\n  const handleClick = (page) => {\n    setCurrentPage(page);\n  };\n\n  return (\n    <>\n      <p>{console.log(todos)}</p>\n      <Link to=\"/NewTodo\" className={styles.newTodo}>\n        New Todo\n      </Link>\n\n      <Link\n        to=\"/CompleteTodo\"\n        className={styles.completeTodo}\n        state={{ completed: todos.filter((todo) => todo.completed) }}\n      >\n        Completed Todo\n      </Link>\n\n      <table className={styles.table}>{/* Table content */}</table>\n\n      <div>\n        <button\n          onClick={() => {\n            if (currentPage > 1) {\n              handleClick(currentPage - 1);\n            }\n          }}\n        >\n          Prev\n        </button>\n        {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n          <button\n            key={page}\n            onClick={() => handleClick(page)}\n            disabled={page === currentPage}\n          >\n            {page}\n          </button>\n        ))}\n        <button\n          onClick={() => {\n            if (currentPage < totalPages) {\n              handleClick(currentPage + 1);\n            }\n          }}\n        >\n          Next\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default Index;\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}